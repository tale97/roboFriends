{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","id","name","email","className","alt","src","CardList","robots","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","this","onRequestRobots","searchField2","robots2","isPending","filteredRobots","filter","toLowerCase","includes","href","rel","onSearchChange2","React","Component","connect","state","console","log","searchRobots","receiveRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","requestRobots","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.18b9570f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n  const { id, name, email } = props;\r\n  return (\r\n    //dib?\r\n    //br3 border 3\r\n    //pa3 padding 3\r\n    //ma2 margin 2\r\n    //grow animation\r\n    //bw2 ?\r\n    //tc text centered\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow shadow-5 bw2 tc\">\r\n      <img alt=\"robo-card\" src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>Email: {email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((robot) => {\r\n        return (\r\n          <Card\r\n            id={robot.id}\r\n            key={robot.id}\r\n            name={robot.name}\r\n            email={robot.email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search...\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"700px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport \"./App.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { setSearchField, requestRobots } from \"../actions.js\";\r\n\r\n// mapStateToProps tell the component which state to listen to, in this case, listen to \"searchField2\"\r\nconst mapStateToProps = (state) => {\r\n  console.log(state);\r\n\r\n  return {\r\n    searchField2: state.searchRobots.searchField2,\r\n    robots2: state.receiveRobots.robots2,\r\n    isPending: state.receiveRobots.isPending,\r\n    error: state.receiveRobots.error,\r\n  };\r\n};\r\n\r\n// actions are just objects; dispatch will send these actions to reducer, which will return a object desribing the new state\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange2: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => requestRobots(dispatch),\r\n    // onRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nclass App extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     robots: [],\r\n  //     searchField: \"\",\r\n  //   };\r\n  // }\r\n\r\n  // when search change, change the this.robots\r\n\r\n  // This does work for onSearchChange(event) {}\r\n  // onSearchChange = (event) => {\r\n  //   this.setState({ searchField: event.target.value });\r\n  //   console.log(this);\r\n  //   console.log(\"change detected\");\r\n  // };\r\n\r\n  componentDidMount() {\r\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    //   .then((response) => response.json())\r\n    //   .then((data) => this.setState({ robots: data }));\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  componentWillUnmount() {}\r\n\r\n  render() {\r\n    const { searchField2, robots2, isPending } = this.props;\r\n    const filteredRobots = robots2.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField2.toLowerCase());\r\n    });\r\n    if (isPending) {\r\n      return <h1 className=\"tc\">Loading...</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <link\r\n            href=\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\"\r\n            rel=\"stylesheet\"\r\n          ></link>\r\n          <h1>RoboFriends</h1>\r\n          <SearchBox searchChange={this.props.onSearchChange2} />\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App); // subscribe the App Component to the Redux Store\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILURE,\r\n} from \"./constants.js\";\r\n\r\n// export const setSearchField = (text) => ({\r\n//   type: CHANGE_SEARCH_FIELD,\r\n//   payload: text,\r\n// });\r\n\r\nexport const setSearchField = (text) => {\r\n  return {\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text,\r\n  };\r\n};\r\n\r\nexport const requestRobots = (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILURE, payload: error })\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILURE = \"REQUEST_ROBOTS_FAILURE\";\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILURE,\r\n} from \"./constants.js\";\r\n\r\nconst initialStateSearch = {\r\n  searchField2: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField2: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  robots2: [],\r\n  isPending: false,\r\n  error: \"\",\r\n};\r\n\r\nexport const receiveRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots2: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAILURE:\r\n      console.log(action.payload);\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport App from \"./containers/App\";\nimport { searchRobots, receiveRobots } from \"./reducers.js\";\nimport logger from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst logger1 = (store) => (next) => (action) => {\n  console.log(\"dispatching action\", action);\n  let result = next(action);\n  console.log(\"next state\", store.getState());\n  return result;\n};\n\nconst rootReducer = combineReducers({ searchRobots, receiveRobots });\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <div>\n      <App />\n    </div>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}